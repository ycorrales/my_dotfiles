
#
# Draw prompt section (bold is used as default)
# USAGE:
#   myprompt::section <color> [prefix] <content> [suffix]
#
myprompt::section() {
  local color prefix content suffix
  [[ -n $1 ]] && color="%F{$1}"  || color="%f"
  [[ -n $2 ]] && prefix="$2"     || prefix=""
  [[ -n $3 ]] && content="$3"    || content=""
  [[ -n $4 ]] && suffix="$4"     || suffix=""

  [[ -z $3 && -z $4 ]] && content=$2 prefix=''

  echo -n "%{%B%}" # set bold
  if [[ $myprompt_prompt_opened == true ]]; then
    echo -n "$prefix"
  fi
  myprompt_prompt_opened=true
  echo -n "%{%b%}" # unset bold

  echo -n "%{%B$color%}" # set color
  echo -n "$content"     # section content
  echo -n "%{%b%f%}"     # unset color

  echo -n "%{%B%}" # reset bold, if it was diabled before
  echo -n "$suffix"

  echo -n "%{%b%}" # unset bold
}

#
# define prompt symbol
#
myprompt_prompt_char()
{
  myprompt::section "green" "%# "
}

#
# See git help status to know more about status formats
#
myprompt_git_status()
{
  [[ $MYPROMPT_GIT_STATUS_SHOW == false ]] && return

  myprompt::is_git || return

  local INDEX git_status=""

  #
  # Configuration

  local MYPROMPT_GIT_STATUS_PREFIX="${MYPROMPT_GIT_STATUS_PREFIX="("}"
  local MYPROMPT_GIT_STATUS_SUFFIX="${MYPROMPT_GIT_STATUS_SUFFIX=") "}"
  local MYPROMPT_GIT_STATUS_COLOR="${MYPROMPT_GIT_STATUS_COLOR="green"}"
  local MYPROMPT_GIT_STATUS_UNTRACKED="${MYPROMPT_GIT_STATUS_UNTRACKED="?"}"
  local MYPROMPT_GIT_STATUS_ADDED="${MYPROMPT_GIT_STATUS_ADDED="+"}"
  local MYPROMPT_GIT_STATUS_MODIFIED="${MYPROMPT_GIT_STATUS_MODIFIED="!"}"
  local MYPROMPT_GIT_STATUS_RENAMED="${MYPROMPT_GIT_STATUS_RENAMED="»"}"
  local MYPROMPT_GIT_STATUS_DELETED="${MYPROMPT_GIT_STATUS_DELETED="✘"}"
  local MYPROMPT_GIT_STATUS_STASHED="${MYPROMPT_GIT_STATUS_STASHED="$"}"
  local MYPROMPT_GIT_STATUS_UNMERGED="${MYPROMPT_GIT_STATUS_UNMERGED="="}"
  local MYPROMPT_GIT_STATUS_AHEAD="${MYPROMPT_GIT_STATUS_AHEAD="⇡"}"
  local MYPROMPT_GIT_STATUS_BEHIND="${MYPROMPT_GIT_STATUS_BEHIND="⇣"}"
  local MYPROMPT_GIT_STATUS_DIVERGED="${MYPROMPT_GIT_STATUS_DIVERGED="⇕"}"

  INDEX=$(command git status --porcelain -b 2> /dev/null)

  [ -n $INDEX ] && MYPROMPT_GIT_STATUS_COLOR="red"

  # Check for untracked files
  if $(echo "$INDEX" | command grep -E '^\?\? ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_UNTRACKED$git_status"
  fi

  # Check for staged files
  if $(echo "$INDEX" | command grep '^A[ MDAU] ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_ADDED$git_status"
  elif $(echo "$INDEX" | command grep '^M[ MD] ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_ADDED$git_status"
  elif $(echo "$INDEX" | command grep '^UA' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_ADDED$git_status"
  fi

  # Check for modified files
  if $(echo "$INDEX" | command grep '^[ MARC]M ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_MODIFIED$git_status"
  fi

  # Check for renamed files
  if $(echo "$INDEX" | command grep '^R[ MD] ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_RENAMED$git_status"
  fi

  # Check for deleted files
  if $(echo "$INDEX" | command grep '^[MARCDU ]D ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_DELETED$git_status"
  elif $(echo "$INDEX" | command grep '^D[ UM] ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_DELETED$git_status"
  fi

  # Check for stashes
  if $(command git rev-parse --verify refs/stash >/dev/null 2>&1); then
    git_status="$MYPROMPT_GIT_STATUS_STASHED$git_status"
  fi

  # Check for unmerged files
  if $(echo "$INDEX" | command grep '^U[UDA] ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_UNMERGED$git_status"
  elif $(echo "$INDEX" | command grep '^AA ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_UNMERGED$git_status"
  elif $(echo "$INDEX" | command grep '^DD ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_UNMERGED$git_status"
  elif $(echo "$INDEX" | command grep '^[DA]U ' &> /dev/null); then
    git_status="$MYPROMPT_GIT_STATUS_UNMERGED$git_status"
  fi

  # Check whether branch is ahead
  local is_ahead=false
  if $(echo "$INDEX" | command grep '^## [^ ]\+ .*ahead' &> /dev/null); then
    is_ahead=true
  fi

  # Check whether branch is behind
  local is_behind=false
  if $(echo "$INDEX" | command grep '^## [^ ]\+ .*behind' &> /dev/null); then
    is_behind=true
  fi

  # Check wheather branch has diverged
  if [[ "$is_ahead" == true && "$is_behind" == true ]]; then
    git_status="$MYPROMPT_GIT_STATUS_DIVERGED$git_status"
  else
    [[ "$is_ahead" == true ]] && git_status="$MYPROMPT_GIT_STATUS_AHEAD$git_status"
    [[ "$is_behind" == true ]] && git_status="$MYPROMPT_GIT_STATUS_BEHIND$git_status"
  fi

  if [[ -n $git_status ]]; then
    # Status prefixes are colorized
    myprompt::section \
      "$MYPROMPT_GIT_STATUS_COLOR" \
      "$MYPROMPT_GIT_STATUS_PREFIX$git_status$MYPROMPT_GIT_STATUS_SUFFIX"
  fi
}

myprompt_git_branch()
{
  [[ $MYPROMPT_GIT_BRANCH_SHOW == false ]] && return

  local git_current_branch="$vcs_info_msg_0_"
  [[ -z "$git_current_branch" ]] && return

  git_current_branch="${git_current_branch#heads/}"
  git_current_branch="${git_current_branch/.../}"

  myprompt::section \
    "green" \
    "(${git_current_branch}) "
}

myprompt_git()
{
  [[ $MYPROMPT_GIT_BRANCH_SHOW == false ]] && return

  local git_branch="$(myprompt_git_branch)" git_status="$(myprompt_git_status)"

  [[ -z $git_branch ]] && return

  myprompt::section \
    'green' \
    "${git_branch}${git_status}" 
}





# indicate a job (for example, vim) has been backgrounded
# If there is a job in the background, display a ✱
myprompt_exit_code()
{
  local sj msg
  sj=$(jobs 2>/dev/null | tail -n 1)

  if [[ $sj == "" ]]; then
    msg=' '
  else
   msg='*'
  fi

  local PREFIX=$(printf "%-10s" "$msg")
  local SUFFIX
  [[ $RETVAL == 0 ]]\
  && SUFFIX="%F{green}$(printf ' \342\234\223')%f"\
  || SUFFIX="%F{red}$(printf ' \342\234\227')%f"

  myprompt::section "white" "$PREFIX" "($RETVAL) " "$SUFFIX \n"
}

# remove trailing slash in folder name completation
# bind 'set mark-directories off'
myprompt_dir()
{
  local _cwd _wd_width
  _cwd="$PWD"
  [[ "$_cwd" =~ ^"$HOME"(/|$) ]] && _cwd="~${_cwd#$HOME}"
  let _wd_width=${COLUMNS}/3
  while [[ ${#_cwd} -gt ${_wd_width} && ${_cwd} != ${PWD##*/} ]]; do
    _cwd=${_cwd#*/};
    local PRE='.../'
  done

  myprompt::section "yellow" "%F{green}[" "${PRE:=""}${_cwd}" "%F{green}]%f "
}

myprompt_user()
{
  myprompt::section "green" "%n "
}

myprompt_logo()
{
  local logo_ch=''
  if [[ "$OSTYPE" == darwin* ]]; then
    logo_ch=' '
  elif [[ "$OSTYPE" == linux* ]]; then
    logo_ch=${SINGULARITY_NAME:+'\342\223\242  '}
    logo_ch=${logo_ch:-${_ALIDOCK_ENV:+'\360\237\220\263  '}}
    logo_ch=${logo_ch:-'\360\237\220\247  '}
  fi

  myprompt::section "white" $logo_ch
}

# Compose whole prompt from sections
# USAGE:
#   myprompt::compose_prompt [section...]
myprompt::compose_prompt()
{
  # Option EXTENDED_GLOB is set locally to force filename generation on
  # argument to conditions, i.e. allow usage of explicit glob qualifier (#q).
  # See the description of filename generation in
  # http://zsh.sourceforge.net/Doc/Release/Conditional-Expressions.html
  setopt EXTENDED_GLOB LOCAL_OPTIONS

  # Treat the first argument as list of prompt sections
  # Compose whole prompt from diferent parts
  # If section is a defined function then invoke it
  # Otherwise render the 'not found' section
  for section in ${@[@]}; do
    if myprompt::defined "myprompt_$section"; then
      myprompt_$section
    else
      myprompt::section 'red' "'$section' not found\n"
    fi
  done
}

# Check if the current directory is in a Git repository.
# USAGE:
# myprompt::is_git
myprompt::is_git()
{
  # See https://git.io/fp8Pa for related discussion
  [[ $(command git rev-parse --is-inside-work-tree 2>/dev/null) == true ]]
}

# Check if command exists in $PATH
# USAGE:
#   myprompt::exists <command>
myprompt::exists() {
  command -v $1 > /dev/null 2>&1
}

# Check if function is defined
# USAGE:
#   myprompt::defined <function>
myprompt::defined() 
{
  typeset -f + "$1" &> /dev/null
}

# Union of two or more arrays
# USAGE:
#   myprompt::union [arr1[ arr2[ ...]]]
# EXAMPLE:
#   $ arr1=('a' 'b' 'c')
#   $ arr2=('b' 'c' 'd')
#   $ arr3=('c' 'd' 'e')
#   $ spaceship::union $arr1 $arr2 $arr3
#   > a b c d e
myprompt::union()
{
  typeset -U sections=("$@")
  echo $sections
}

myprompt_prompt() {
  # Retrieve exit code of last command to use in exit_code
  # Must be captured before any other command in prompt is executed
  # Must be the very first line in all entry prompt functions, or the value
  # will be overridden by a different command execution - do not move this line!
  RETVAL=$?

  # Should it add a new line before the prompt?
  myprompt::compose_prompt ${MYPROMPT_PROMPT_ORDER[@]}
}

# $RPROMPT
# Optional (right) prompt
myprompt_rprompt() {
  # Retrieve exit code of last command to use in exit_code
  RETVAL=$?

  myprompt::compose_prompt ${MYPROMPT_RPROMPT_ORDER[@]}
}

# PS2
# Continuation interactive prompt
myprompt_ps2() {
  # Retrieve exit code of last command to use in exit_code
  RETVAL=$?

  local char='>'
  myprompt::section "green" "$char"
}

myprompt::exec_vcs_info_precmd_hook()
{
  MYPROMPT_GIT_BRANCH_SHOW=${MYPROMPT_GIT_BRANCH_SHOW:=true}
  [[ $SPACESHIP_GIT_BRANCH_SHOW == false ]] && return
  vcs_info
}

prompt_myprompt_setup()
{
  autoload -Uz vcs_info
  autoload -Uz add-zsh-hook

  # This variable is a magic variable used when loading themes with zsh's prompt
  # function. It will ensure the proper prompt options are set.
  prompt_opts=(cr percent sp subst)

  # Borrowed from promptinit, sets the prompt options in case the prompt was not
  # initialized via promptinit.
  setopt noprompt{bang,cr,percent,subst} "prompt${^prompt_opts[@]}"

  # Disable python virtualenv environment prompt prefix
  VIRTUAL_ENV_DISABLE_PROMPT=true

  # Configure vcs_info helper for potential use in the future
  add-zsh-hook precmd myprompt::exec_vcs_info_precmd_hook
  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:git*' formats '%b'


  MYPROMPT_PROMPT_ORDER=(
  logo          # logo section to identify OS
  user          # username section
  dir           # current directory section
  exit_code     # exit code section
  git        # git info section
  prompt_char   # new line and prompt_char section
)

  MYPROMPT_RPROMPT_ORDER=(
 # Empty by default
)

  [ -f "$HOME/.zsh/prompt_utils.zsh" ] && source "$HOME/.zsh/prompt_utils.zsh"
  for section in $(myprompt::union $MYPROMPT_PROMPT_ORDER $MYPROMPT_RPROMPT_ORDER); do
    if myprompt::defined "myprompt_$section"; then
      # Custom section is declared, nothing else to do
      continue
    else
      echo "Section '$section' have not been loaded."
    fi
  done

  # Expose myprompt to environment variables
  PROMPT='$(myprompt_prompt)'
  #PS2='$(myprompt_ps2)'
  #RPS1='$(myprompt_rprompt)'

}

prompt_myprompt_setup "$@"