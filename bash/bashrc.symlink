# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi

#
#Put custom code from HERE
#
GDATE='date'
type gdate > /dev/null 2>&1 && GDATE='gdate'
b_tm=$($GDATE +%s.%N)
# source all .sh files inside of the sh/ directory
export LC_ALL='en_US.UTF-8'
export SPHENIX_RCF='rcf.bnl.gov'$
export ALIDOCK='^aliPhysic'

DOTFILES="$HOME/Software/dotfiles/"
if [[ $HOSTNAME =~ $SPHENIX_RCF ]]; then
  DOTFILES="$HOME/dotfiles/"
elif [[ $HOSTNAME =~ $ALIDOCK ]]; then
  DOTFILES=${SINGULARITY_NAME+"${DOTFILES}"}
  DOTFILES=${DOTFILES:="/mnt/Software/dotfiles/"}
  [ -n SINGULARITY_NAME ] && export SW_WORK_DIR="${HOME}/sPHENIX/Projects/01.MVTX/02.Testbeam/TB-2019_FTBF_4stave-telescope/sw"
fi
export DOTFILES

for BASH_FILE in $( ls -r $DOTFILES/bash/add_files/*.sh ); do
  source $BASH_FILE;
  unset BASH_FILE
done

#
# 'Til HERE
#
e_tm=$($GDATE +%s.%N)
[[ $(echo "$( echo "$e_tm - $b_tm" | bc -l ) > 1" | bc) != 1 ]] || \
  echo "Shell initialization too slow, time higher than 1 sec."
# Execute alidock within the appropriate Python virtual environment
function alidock() {( source "/Users/ycorrales/.virtualenvs/alidock/bin/activate" && command alidock "$@"; exit $?; )}
